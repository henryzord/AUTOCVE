#<pipeline> ::= <classifier>
<pipeline> ::= <adding_features> "->" <selector> "->" <classifier> | <scaler> "->" <preprocessing> "->" <selector> "->" <classifier> | <adding_features> "->"  <classifier> |  <scaler> "->" <preprocessing> "->" <classifier> | <classifier>

<classifier> ::= <DecisionTree> | <RuleBasedClassifier> | <DecisionTable>

<DecisionTree> ::= "pbil.generation/J48(jobject=None, options=[" <J48_pruning>  ","  <J48_binarySplits>  ","  <J48_useMDLcorrection>  ","  <J48_useLaplace>  ","  <J48_doNotMakeSplitPointActualValue>  ","  <J48_collapseTree>  ","  <J48_minNumObj>  "])"

<J48_pruning> ::= <J48_confidenceFactor>  |  <J48_reducedErrorPruning>  |  <J48_unpruned>

<J48_confidenceFactor> ::= "'-C'" ","  <J48_confidenceFactorValue>  ","  <J48_subtreeRaising>
<J48_confidenceFactorValue> ::= "'" "CONSTINT(5, 51)" "e-2" "'"

<J48_reducedErrorPruning> ::= "'-R', '-Q', '1'"  ","  <J48_numFolds>  ","  <J48_subtreeRaising>
<J48_numFolds> ::= "'-N',"  "'"  "CONSTINT(2, 11)"  "'"

<J48_subtreeRaising> ::= "'-S'" | "''"

<J48_unpruned> ::= "'-U'"


<J48_binarySplits> ::= "'-B'" | "''"
<J48_useMDLcorrection> ::= "'-J'" | "''"
<J48_useLaplace> ::= "'-A'" | "''"
<J48_doNotMakeSplitPointActualValue> ::= "'-doNotMakeSplitPointActualValue'" | "''"
<J48_collapseTree> ::= "'-O'" | "''"

<J48_minNumObj> ::= "'-M'" ",'" "CONSTINT(2, 11)" "'"


<DecisionTree> ::= "pbil.generation/SimpleCart(jobject=None, options=["  <SimpleCart_usePrune>  ","  <SimpleCart_minNumObj>  ","  <SimpleCart_heuristic> "])"

<SimpleCart_usePrune> ::= "'-U'" | "'-C', '1', '-S', '1'" ","  <SimpleCart_numFoldsPruning>  ","  <SimpleCart_useOneSE>

<SimpleCart_numFoldsPruning> ::= "'-N'," "'" "CONSTINT(2, 11)" "'" | "''"
<SimpleCart_useOneSE> ::= "'-A'" | "''"

<SimpleCart_heuristic> ::= "'-H'" | "''"
<SimpleCart_minNumObj> ::= "'-M', " "'" "CONSTINT(2, 11)" "'"


<RuleBasedClassifier> ::= "pbil.generation/PART(jobject=None, options=["  <PART_pruning>  ","  <J48_useMDLcorrection>  ","  <J48_binarySplits>  ","  <J48_minNumObj>  "," <J48_doNotMakeSplitPointActualValue> "])"

<PART_pruning> ::= <J48_confidenceFactor>  |  <PART_reducedErrorPruning>  |  <J48_unpruned>
<PART_reducedErrorPruning> ::= "'-R', '-Q', '1'"  ","  <J48_numFolds>


<RuleBasedClassifier> ::= "pbil.generation/JRip(jobject=None, options=['-S', '1'" ","  <JRip_usePruning>  ","  <JRip_minNo>  "," <JRip_checkErrorRate> "])"

<JRip_usePruning> ::= <JRip_optimizations>  ","  <JRip_folds>  | "'-P'"

<JRip_optimizations> ::= "'-O'"  ","  "'"  "CONSTINT(2, 11)"  "'"  | "''"

<JRip_folds> ::= "'-F'"  ","  "'"  "CONSTINT(2, 11)"  "'"  | "''"

<JRip_minNo> ::= "'-N',"  "'" "CONSTINT(2, 11)" "'" | "''"
<JRip_checkErrorRate> ::= "'-E'" | "''"

<DecisionTable> ::= "pbil.generation/DecisionTable(jobject=None, options=["  <DecisionTable_evaluationMeasure>  ","  <DecisionTable_crossVal>  ","  <DecisionTable_useIBk>  "])"

<DecisionTable_useIBk> ::= "'-I'" | "''"
<DecisionTable_crossVal> ::= "'-X'," "'" "CONSTINT(1, 11)" "'"

<DecisionTable_evaluationMeasure> ::= "'-E'"  ","  <DecisionTable_evaluationMeasureValue>
<DecisionTable_evaluationMeasureValue> ::= "'acc'" | "'rmse'" | "'mae'" | "'auc'"

<DecisionTable_search> ::= "'-S'" "," "'" <GreedyStepwise_conservativeForwardSelection>  <GreedyStepwise_searchBackwards>  "'" | "'-S'" "," "'"  <BestFirst_direction>  <BestFirst_searchTermination>  "'"

<GreedyStepwise_conservativeForwardSelection> ::= "-C" | ""
<GreedyStepwise_searchBackwards> ::= "-B" | ""

<BestFirst_direction> ::= "-D" "CONSTINT(0, 3)" | ""
<BestFirst_searchTermination> ::= "-N" "CONSTINT(1, 11)" | ""


<scaler> ::= "sklearn.preprocessing/MaxAbsScaler()" | "sklearn.preprocessing/MinMaxScaler()" | "sklearn.preprocessing/RobustScaler()" | "sklearn.preprocessing/StandardScaler()"


<preprocessing> ::= "sklearn.preprocessing/Binarizer(threshold=" <threshold> ")" | "sklearn.preprocessing/Normalizer(norm=" <norm> ")"
<threshold> ::= "CONSTFLOAT(0.0, 1.0)"
<norm> ::= "'l1'" | "'l2'" | "'max'"

<preprocessing> ::= "sklearn.decomposition/FastICA(tol=" <tol_ica> ", random_state=" <RANDOM_STATE> ")"
<tol_ica> ::= "CONSTFLOAT(0.0, 1.0)"

<preprocessing> ::= "sklearn.cluster/FeatureAgglomeration(linkage=" <linkage> ", affinity=" <affinity> ")"
<linkage> ::= "'ward'" | "'complete'" | "'average'"
<affinity> ::= "'euclidean'" | "'l1'" | "'l2'" | "'manhattan'" | "'cosine'" | "'precomputed'"

<preprocessing> ::= "sklearn.kernel_approximation/Nystroem(kernel=" <kernel> ", gamma=" <gamma> ", n_components=" <n_components> ", random_state=" <RANDOM_STATE> ")"
<kernel> ::= "'rbf'" | "'cosine'" | "'chi2'" | "'laplacian'" | "'polynomial'" | "'poly'" | "'linear'" | "'additive_chi2'" | "'sigmoid'"
<gamma> ::= "CONSTFLOAT(0.0, 1.0)"
<n_components> ::= "CONSTINT(1, 11)"

<preprocessing> ::= "sklearn.decomposition/PCA(svd_solver='randomized', iterated_power=" <iterated_power> ", random_state=" <RANDOM_STATE> ")"
<iterated_power> ::= "CONSTINT(1, 11)"

<preprocessing> ::= <selector> "->" "sklearn.preprocessing/PolynomialFeatures(degree=2, include_bias=False, interaction_only=False)" | "sklearn.kernel_approximation/RBFSampler(gamma=" <gamma> ", random_state=" <RANDOM_STATE> ")"
<adding_features> ::= "AUTOCVE.util.custom_methods.TPOT/ZeroCount()" | "AUTOCVE.util.custom_methods.TPOT/OneHotEncoder(minimum_fraction=" <minimum_fraction> ", sparse=False)"
<minimum_fraction> ::= "0.05" | "0.1" | "0.15" | "0.2" | "0.25"


<selector> ::= "sklearn.feature_selection/SelectFwe(alpha=" <alpha_selector> ", score_func=sklearn.feature_selection/f_classif)"
<alpha_selector> ::= "CONSTFLOAT(0, 0.05)"

<selector> ::= "sklearn.feature_selection/SelectPercentile(percentile=" <percentile> ", score_func=sklearn.feature_selection/f_classif)"
<percentile> ::= "CONSTINT(1, 100)"

<selector> ::= "sklearn.feature_selection/VarianceThreshold(threshold=" <threshold> ")"

<selector> ::= "sklearn.feature_selection/RFE(step=" <step> ", estimator=" <estimator> ")"
<step> ::= "CONSTFLOAT(0.05, 1.0)"
<estimator> ::= "sklearn.ensemble/ExtraTreesClassifier(n_estimators=100, criterion=" <criterion> ", max_features=" <max_features> ", random_state=" <RANDOM_STATE> ")"
<criterion> ::= "'gini'" | "'entropy'"
<max_features> ::= "CONSTFLOAT(0.05, 1.0)"

<selector> ::= "sklearn.feature_selection/SelectFromModel(threshold=" <threshold> ", estimator=" <estimator> ")"


<RANDOM_STATE> ::= "42"