<pipeline> ::= <adding_features> "->" <selector> "->" <classifier> | <scaler> "->" <preprocessing> "->" <selector> "->" <classifier> | <adding_features> "->"  <classifier> |  <scaler> "->" <preprocessing> "->" <classifier> | <classifier>

# TODO make converter from pandas.dataframe to weka dataset!

# ----------------------------- #
# -------- classifiers -------- #
# ----------------------------- #
<classifier> ::= <DecisionTree> | <RuleBasedClassifier> | <DecisionTable>

#<DecisionTree> ::= "sklearn.tree/DecisionTreeClassifier(criterion=" <criterion> ", max_depth=" <max_depth> ", min_samples_split=" <min_samples_split> ", min_samples_leaf=" <min_samples_leaf> ", random_state=" <RANDOM_STATE> ")"
#<criterion> ::= "'gini'" | "'entropy'"
#<max_depth> ::= "CONSTINT(1,11)"
#<min_samples_split> ::= "CONSTINT(2, 21)"
#<min_samples_leaf> ::= "CONSTINT(1, 21)"

# TODO add parameters
<DecisionTree> ::= "weka.core.classes/from_commandline(classname='weka.classifiers.Classifier, cmdline='weka.classifiers.trees.J48')"

<RuleBasedClassifier> ::= "weka.core.classes/from_commandline(classname='weka.classifiers.Classifier, cmdline='weka.classifiers.rules.JRip')"

<DecisionTable> ::= "weka.core.classes/from_commandline(classname='weka.classifiers.Classifier, cmdline='weka.classifiers.rules.DecisionTable')"

# ----------------------------- #
# ----------- scaler ---------- #
# ----------------------------- #
<scaler> ::= "sklearn.preprocessing/MaxAbsScaler()" | "sklearn.preprocessing/MinMaxScaler()" | "sklearn.preprocessing/RobustScaler()" | "sklearn.preprocessing/StandardScaler()"

# ----------------------------- #
# ------- preprocessing ------- #
# ----------------------------- #
<preprocessing> ::= "sklearn.kernel_approximation/Nystroem(kernel=" <kernel> ", gamma=" <gamma> ", n_components=" <n_components> ", random_state=" <RANDOM_STATE> ")"
<kernel> ::= "'rbf'" | "'cosine'" | "'chi2'" | "'laplacian'" | "'polynomial'" | "'poly'" | "'linear'" | "'additive_chi2'" | "'sigmoid'"
<gamma> ::= "CONSTFLOAT(0.0, 1.0)"
<n_components> ::= "CONSTINT(1, 11)"

<preprocessing> ::= "sklearn.decomposition/PCA(svd_solver='randomized', iterated_power=" <iterated_power> ", random_state=" <RANDOM_STATE> ")"
<iterated_power> ::= "CONSTINT(1, 11)"

<preprocessing> ::= <selector> "->" "sklearn.preprocessing/PolynomialFeatures(degree=2, include_bias=False, interaction_only=False)" | "sklearn.kernel_approximation/RBFSampler(gamma=" <gamma> ", random_state=" <RANDOM_STATE> ")"

<preprocessing> ::= "sklearn.preprocessing/Binarizer(threshold=" <threshold> ")" | "sklearn.preprocessing/Normalizer(norm=" <norm> ")"
<threshold> ::= "CONSTFLOAT(0.0, 1.0)"
<norm> ::= "'l1'" | "'l2'" | "'max'"

<preprocessing> ::= "sklearn.decomposition/FastICA(tol=" <tol_ica> ", random_state=" <RANDOM_STATE> ")"
<tol_ica> ::= "CONSTFLOAT(0.0, 1.0)"

<preprocessing> ::= "sklearn.cluster/FeatureAgglomeration(linkage=" <linkage> ", affinity=" <affinity> ")"
<linkage> ::= "'ward'" | "'complete'" | "'average'"
<affinity> ::= "'euclidean'" | "'l1'" | "'l2'" | "'manhattan'" | "'cosine'" | "'precomputed'"

# ----------------------------- #
# -------- add features ------- #
# ----------------------------- #
<adding_features> ::= "AUTOCVE.util.custom_methods.TPOT/ZeroCount()" | "AUTOCVE.util.custom_methods.TPOT/OneHotEncoder(minimum_fraction=" <minimum_fraction> ", sparse=False)"
<minimum_fraction> ::= "0.05" | "0.1" | "0.15" | "0.2" | "0.25"


# ----------------------------- #
# --------- Selectors --------- #
# ----------------------------- #
<selector> ::= "sklearn.feature_selection/SelectFwe(alpha=" <alpha_selector> ", score_func=sklearn.feature_selection/f_classif)"
<alpha_selector> ::= "CONSTFLOAT(0, 0.05)"

<selector> ::= "sklearn.feature_selection/SelectPercentile(percentile=" <percentile> ", score_func=sklearn.feature_selection/f_classif)"
<percentile> ::= "CONSTINT(1, 100)"

<selector> ::= "sklearn.feature_selection/VarianceThreshold(threshold=" <threshold> ")"

<selector> ::= "sklearn.feature_selection/RFE(step=" <step> ", estimator=" <estimator> ")"
<step> ::= "CONSTFLOAT(0.05, 1.0)"
<estimator> ::= "sklearn.ensemble/ExtraTreesClassifier(n_estimators=100, criterion=" <criterion> ", max_features=" <max_features> ", random_state=" <RANDOM_STATE> ")"

<selector> ::= "sklearn.feature_selection/SelectFromModel(threshold=" <threshold> ", estimator=" <estimator> ")"

<RANDOM_STATE> ::= "42"

